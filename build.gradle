plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'history.traveler'
version = '1.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}


repositories {
    mavenCentral()
}


//implementation:컴파일 및 런타임에 모두 필요. 다른 모듈이나 프로젝트에서 이 의존성을 사용할 수 없ek. 해당 모듈의 내부 구현에만 사용.


dependencies {

    //for google oauth
    implementation 'com.google.api-client:google-api-client:1.34.1'
    implementation 'com.google.oauth-client:google-oauth-client-jetty:1.34.1'
    implementation 'com.google.http-client:google-http-client-jackson2:1.43.3'
    //웹 개발을 위한 의존성 주입  ex)mvc아키텍쳐 , 톰캣, restful api, jackson(json처리를 위한 라이브러리)제공
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // OAuth 2.0 클라이언트를 쉽게 설정하고 사용할 수 있도록 도와주는 의존성
    //OAuth 2.0 인증: 다양한 OAuth 2.0 제공자와 통합해 사용자가 로그인할 수 있도록 지원, 자동 구성: Spring Boot의 자동 구성 기능을 활용, OAuth 2.0 클라이언트를 설정 자동 처리
    //보안 설정: Spring Security와 통합 OAuth 2.0 인증보안 설정 구성, 토큰 관리: 발급받은 액세스 토큰과 리프레시 토큰을 관리,API 호출: 인증된 사용자의 정보를 가져오거나, OAuth제공자의 API에 접근
    //implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    //JPA(Java Persistence API) 지원: JPA를 사용하여 객체-관계 매핑(ORM)을 통해 데이터베이스의 데이터를 객체로 매핑, 객체를 통해 데이터베이스에 접근
    //JPA를 통해 데이터 액세스 계층을 쉽게 구현, CRUD 작업을 위한 리포지토리 인터페이스를 자동으로 생성
    //JPA와 관련된 설정(예: 데이터베이스 연결, JPA 구현체 설정 등)을 자동으로 처리, 쿼리 메서드: 메서드 이름을 기반 쿼리 생성, 트랜잭션 관리
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    //컴파일 및 런타임 의존성
    implementation 'com.mysql:mysql-connector-j'
    //about security, Spring Security 통합 위한 의존성, 인증 인가 제공으로 보안 강화. 사용자의 로그인,권한, URL 접근 제어 등 구현
    //기본 보안 설정: 기본적인 보안 설정이 자동으로 적용,모든 요청에 대해 기본적 인증이 요구, 기본 사용자 이름,비밀번호 자동 생성
    //커스터마이징 가능: 기본 보안 설정을 바탕으로,보안 설정을 커스터마이즈가능.
    //application.yml을 통해 보안 관련 설정 쉡게 조정 가능
  // implementation 'org.springframework.boot:spring-boot-starter-security'
    // JSON Web Token (JWT)을 생성하고 검증관련 의존성 주입, JWT 생성: JWT의 헤더, 페이로드, 서명 설정 자신만의 토큰 생성가능
    //JWT 검증: 생성된 JWT의 유효성을 검증할 수 있는 기능 제공 (토큰 변조,만료 체크) ,서명 및 암호화: JJWT는 알고리즘으로 JWT를 서명하고 암호화할 수 있는 기능 제공 =>보안성 향성
    //사용자 정보나 권한 등의 데이터를 JWT에 포함시킴, 직관적,쉬운 API를 제공=> JWT를 쉽게 생성 관리 가능
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    //XML 데이터를 Java 객체로 변환, 반대 작업도 수행
    //객체 매핑: JAXB는 XML 스키마를 기반으로 Java 클래스를 생성, Java 클래스를 XML 스키마에 매핑 =>XML 구조와 Java 객체 관계를 정의
    //어노테이션 =>XML 요소와 Java 필드 간의 매핑을 명시적 설정
    //유연한 XML 처리: JAXB는 XML 문서의 구조가 변경시 유연한 대응 가능
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    //스웨거
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.4'

    // 스프링 걸로 버전으로 변경
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    //implementation 'org.hibernate.validator:hibernate-validator:6.0.13.Final' // 또는 최신 버전
    //implementation 'org.glassfish:javax.el:3.0.0' // 또는 최신 버전

    implementation 'org.springdoc:springdoc-openapi-ui:1.6.9'

    //테스트의존성 주입 ex)JUnit: 단위 테스트 및 통합 테스트를 작성에 사용,Spring Test:테스트 유틸리티를 제공하여 Spring 컴포넌트를 테스트,Mockito:의존성을 주입하여 테스트를 보다 유연하게 작성
    //AssertJ:테스트에서 assertion 보다 읽기 쉽고 강력하게 만들어줌. JSONPath: JSON 데이터를 쉽게 검증할 수 있도록 함
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    //Spring Security를 사용하는 애플리케이션의 테스트지원을 위한 의존성
    //Spring Security의 기능을 테스트할 수 있게 유틸리티, 어노테이션 제공
    //Spring MVC 테스트 프레임워크인 MockMvc와 통합, 보안 필터가 적용된 상태에서 컨트롤러 테스트가능.
   // testImplementation 'org.springframework.security:spring-security-test'


    //runtimeOnly 'com.h2database:h2'   //Inmemory database
    //MySQL 데이터베이스와 애플리케이션 간의 연결을 가능하게 해주는 JDBC 드라이버 DBC를 통해 SQL 쿼리를 실행,런타임 의존성
    runtimeOnly 'com.mysql:mysql-connector-j'
    //Java 코드에서 반복적인 작업을 줄여줌(getter,setter 등)
    compileOnly 'org.projectlombok:lombok'
    // Lombok은 애너테이션 프로세서를 사용하여 코드 생성 작업을 수행,annotationProcessor로 지정된 의존성은 컴파일에 필요,런타임에 필요없음,최종 JAR 파일에는 포함x,
    //배포시 Lombok 라이브러리를 포함할 필요x.
    annotationProcessor 'org.projectlombok:lombok'
    //테스트 코드에서도 Lombok의 애너테이션을 사용가능
    testImplementation 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
}

test {
    useJUnitPlatform()
}